module.exports = /* eslint-disable */ [{"name":"ConceptTable","description":"","props":{"width":{"type":{"name":"number"},"required":true,"description":"width of the table"},"height":{"type":{"name":"number"},"required":true,"description":"height of the table"},"headerWidth":{"type":{"name":"number"},"required":true,"description":"width of the header"},"rowHeight":{"type":{"name":"number"},"required":true,"description":"height of the row"},"table":{"type":{"name":"object"},"required":true,"description":"information to render on the table","defaultValue":{"value":"{}","computed":false}}},"code":"import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Column, Table } from 'react-virtualized';\r\nimport 'react-virtualized/styles.css'; // only needs to be imported once\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst StyledTable = styled(Table)`\r\n  display: flex;\r\n  text-align: center;\r\n  flex-direction: row;\r\n  @media (min-width: 900px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport default class ConceptTable extends Component {\r\n               \r\n                 /** Renders a table based on concepts */\r\n                 render() {\r\n                   return <StyledTable width={this.props.width} height={this.props.height} headerHeight={this.props.headerWidth} rowHeight={this.props.rowHeight} rowCount={this.props.table.data.length} rowGetter={({ index }) => this.props.table.data[index]}>\r\n                       {this.props.table.columns.map(column => (\r\n                         <Column\r\n                           id={column.accessor}\r\n                           width={150}\r\n                           label={column.accessor}\r\n                           dataKey={column.accessor}\r\n                         />\r\n                       ))}\r\n                     </StyledTable>;\r\n                 }\r\n               }\r\n\r\nConceptTable.propTypes={\r\n  /** width of the table */\r\n  width:PropTypes.number.isRequired,\r\n  /** height of the table */\r\n  height : PropTypes.number.isRequired,\r\n  /** width of the header */\r\n  headerWidth:PropTypes.number.isRequired,\r\n  /** height of the row */\r\n  rowHeight : PropTypes.number.isRequired,\r\n  /** information to render on the table */\r\n  table : PropTypes.object.isRequired,\r\n};\r\n\r\nConceptTable.defaultProps = {\r\n table: {}\r\n};\r\n","examples":[{"name":"ExampleConceptTable","description":"Renders a table based on concepts","code":"import React, { Component } from 'react';\r\nimport ConceptTable from 'components-app/ConceptTable/ConceptTable';\r\n\r\n\r\n/** Renders a table based on concepts */\r\nexport default class ExampleConceptTable extends Component{\r\n  render() {\r\n\r\n    return <ConceptTable width={800} \r\n    height={250} \r\n    headerWidth={50} \r\n    rowHeight={50} \r\n    data={[{ id: 1, name: \"Anna\", debt: 200000, lastActivityDate: \"6th June 2017\" },\r\n     { id: 2, name: \"Hugo\", debt: 550000, lastActivityDate: \"6th June 2017\" },\r\n     { id: 3, name: \"Louis\", debt: 130000, lastActivityDate: \"6th June 2017\" }]} />;}\r\n}\r\n"}]},{"name":"TableContainer","description":"Container of a table so it manages the diplay in different sizes","props":{"concepts":{"type":{"name":"object"},"required":true,"description":"information to render on the table"},"actions":{"type":{"name":"object"},"required":true,"description":""}},"code":"import React, { PureComponent } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\nimport { responsiveStyle } from 'styled-system';\r\nimport ConceptTableR from \"../ConceptTable/ConceptTableR\";\r\nimport ConceptTable from \"../ConceptTable/ConceptTable\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as conceptActions from \"../../actions/conceptActions\";\r\n\r\n\r\nconst flexDirection = responsiveStyle({\r\n  prop: 'direction',\r\n  cssProperty: 'flexDirection'\r\n})\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  ${flexDirection};\r\n`;\r\n// Create a Title component that'll render an <h1> tag with some styles\r\n//styled.h1 is a function that when call return a react component that renders and H1\r\n// You can now call functions with `` and pass those arguments\r\nconst Title = styled.h1`\r\n  font-size: 1.5em;\r\n  color: palevioletred;\r\n`;\r\n\r\n\r\n/** Container of a table so it manages the diplay in different sizes */\r\nclass TableContainer extends PureComponent {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   console.log(\"constructor \", this.props.concepts.length);\r\n  //   if(this.props.concepts.length >0)\r\n  //     {\r\n  //   this.state = {\r\n  //     concepts: this.props.concepts,\r\n  //     errors: {}\r\n  //   };\r\n  // }\r\n  // }\r\n\r\n  render() {\r\n    console.log(this.props.concepts);\r\n     if(this.props.concepts.table != null)\r\n      {\r\n        console.log(\"Render \", this.props.concepts);\r\n    return <Flex direction={[\"column\"]}>\r\n        <Title>{this.props.concepts.table}</Title>\r\n        <br />\r\n        <ConceptTableR table={this.props.concepts} />\r\n        <br />\r\n        <ConceptTable width={800} height={600} headerWidth={80} rowHeight={30} table={this.props.concepts} />\r\n      </Flex>;\r\n  }\r\n  else{return <div />}\r\n  }\r\n}\r\n\r\n TableContainer.propTypes = { \r\n   /** information to render on the table */\r\n   concepts: PropTypes.object.isRequired, \r\n   actions: PropTypes.object.isRequired };\r\n\r\n\r\n\r\n //-------------------------------------------------------------------\r\n//Redux connect section\r\n//-------------------------------------------------------------------\r\nfunction mapStateToProps(state) {\r\n  return {concepts: state.concepts};\r\n}\r\n\r\n\r\nfunction mapDispatchToProps (dispatch)\r\n{\r\n  return {\r\n    actions: bindActionCreators(conceptActions,dispatch)\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableContainer);\r\n","examples":[]}]